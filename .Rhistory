return(max_sal_year - first_year)
}
calculate_max_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
max_pts <- max(dat$pts_per_g)
max_ptrs_year <- min(dat$season[dat$pts_per_g == max_pts])
first_year <- min(dat$season)
return(max_ptrs_year - first_year)
}
calculate_good_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
good_pts <- max(dat$pts_per_g) * 0.9
good_ptrs_year <- min(dat$season[dat$pts_per_g >= good_pts])
first_year <- min(dat$season)
return(good_ptrs_year - first_year)
}
is_active_player <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
return(nrow(sal[sal$season == 2020,]))
}
calculate_all_star_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
if (nrow(dat[dat$all_star == 1,]) == 0) {
return(NA)
}
all_star_yr = min(dat$season[dat$all_star == 1])
first_yr = min(dat$season)
return(all_star_yr - first_yr)
}
## Add a column "career" that calculates number of years in career
players$career <- apply(players, 1, FUN = calculate_career_length)
## Add a column "max_sal_yrs" that calculates number of years between first contract and year with highest contract in career
players$max_sal_yrs <- apply(players, 1, FUN = calculate_max_salary_yrs)
## Add column "max_pts_yrs" that represents the number of years between first year and first year with highest ppg
players$max_pts_yrs <- apply(players, 1, FUN = calculate_max_pts_yrs)
## Add column "good_pts_yrs" that represents the number of years between first year and first year with ppg equal to at least 90% of their best ppg year
players$good_pts_yrs <- apply(players, 1, FUN = calculate_good_pts_yrs)
## Add column "is_active" that is 1 if player is currently active and 0 otherwise
players$is_active <- apply(players, 1, FUN = is_active_player)
## Add column "all_star_yrs" that is the number of years it took a player to make their first all star team
players$all_star_yrs <- apply(players, 1, FUN = calculate_all_star_yrs)
players <- players[players$is_active == 1,]
# Aggregate average years to make all star team by draft year
players_centers = players[grepl("Center", players$position),]
players_others = players[!grepl("Center", players$position),]
as_centers <- aggregate(list(all_star_yrs=players_centers$all_star_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
as_others <- aggregate(list(all_star_yrs=players_others$all_star_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter<-function(num_bins, data, xvar, yvar, color, TITLE, YTITLE){
ggplot(data, aes(x = xvar , y = yvar, color = color)) +
stat_binmean(n = num_bins, geom = "line") +
stat_binmean(n = num_bins, geom = "point") +
labs(title = TITLE,
y = YTITLE,
x = "Date")
}
ggplot(as_centers[as_centers["year"] < 2015,], aes(x = year , y = all_star_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_others[as_others["year"] < 2015,], aes(x = year , y = all_star_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
binscatter(2, as_centers, as_centers$year, as_centers$all_star_yrs, "Centers", "Average years to make all star team", "years")
binscatter(2, as_others, as_others$year, as_others$all_star_yrs, "Others", "Average years to make all star team", "years")
good_centers <- aggregate(list(good_pts_yrs=players_centers$good_pts_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
good_others <- aggregate(list(good_pts_yrs=players_others$good_pts_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter(6, good_centers, good_centers$year, good_centers$good_pts_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(6,good_others, good_others$year, good_others$good_pts_yrs, "Others", "Average years to reach 90% max pts", "years")
# HSAC NBA Project
# Fall 2021
rm(list=ls()) # Removes all objects from the environment
cat('\014') # Clears the console
setwd("~/Desktop/NBA-Bigs") # Set working directory
if (!require(haven)) install.packages("haven"); library(haven)
if (!require(sandwich)) install.packages("sandwich"); library(sandwich)
if (!require(lmtest)) install.packages("lmtest"); library(lmtest)
if (!require(stargazer)) install.packages("stargazer"); library(stargazer)
if (!require(tidyverse)) install.packages("tidyverse"); library(tidyverse)
if (!require(lubridate)) install.packages("lubridate"); library(lubridate)
if (!require(statar)) install.packages("statar"); library(statar)
# Read in the data
players <- read.csv("scraping/players.csv")
salaries <- read.csv("scraping/salaries.csv")
player_data <- read.csv("scraping/player_data.csv")
# Add a column "normalized_salary" which represents each salary as a fraction of the salary cap
salaries$normalized_salary <- salaries$salary / salaries$salary_cap
# The following functions are used with "apply" to generate new columns
calculate_career_length <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
if (nrow(sal) == 0) {
return(NA)
}
return(max(sal$season) - min(sal$season))
}
calculate_max_salary_yrs <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
if (nrow(sal) == 0) {
return(NA)
}
max_sal <- max(sal$normalized_salary)
max_sal_year <- min(sal$season[sal$normalized_salary == max_sal])
first_year <- min(sal$season)
return(max_sal_year - first_year)
}
calculate_max_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
max_pts <- max(dat$pts_per_g)
max_ptrs_year <- min(dat$season[dat$pts_per_g == max_pts])
first_year <- min(dat$season)
return(max_ptrs_year - first_year)
}
calculate_good_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
good_pts <- max(dat$pts_per_g) * 0.9
good_ptrs_year <- min(dat$season[dat$pts_per_g >= good_pts])
first_year <- min(dat$season)
return(good_ptrs_year - first_year)
}
is_active_player <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
return(nrow(sal[sal$season == 2020,]))
}
calculate_all_star_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
if (nrow(dat[dat$all_star == 1,]) == 0) {
return(NA)
}
all_star_yr = min(dat$season[dat$all_star == 1])
first_yr = min(dat$season)
return(all_star_yr - first_yr)
}
## Add a column "career" that calculates number of years in career
players$career <- apply(players, 1, FUN = calculate_career_length)
## Add a column "max_sal_yrs" that calculates number of years between first contract and year with highest contract in career
players$max_sal_yrs <- apply(players, 1, FUN = calculate_max_salary_yrs)
## Add column "max_pts_yrs" that represents the number of years between first year and first year with highest ppg
players$max_pts_yrs <- apply(players, 1, FUN = calculate_max_pts_yrs)
## Add column "good_pts_yrs" that represents the number of years between first year and first year with ppg equal to at least 90% of their best ppg year
players$good_pts_yrs <- apply(players, 1, FUN = calculate_good_pts_yrs)
## Add column "is_active" that is 1 if player is currently active and 0 otherwise
players$is_active <- apply(players, 1, FUN = is_active_player)
## Add column "all_star_yrs" that is the number of years it took a player to make their first all star team
players$all_star_yrs <- apply(players, 1, FUN = calculate_all_star_yrs)
players <- players[players$is_active == 0,]
# Aggregate average years to make all star team by draft year
players_centers = players[grepl("Center", players$position),]
players_others = players[!grepl("Center", players$position),]
as_centers <- aggregate(list(all_star_yrs=players_centers$all_star_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
as_others <- aggregate(list(all_star_yrs=players_others$all_star_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter<-function(num_bins, data, xvar, yvar, color, TITLE, YTITLE){
ggplot(data, aes(x = xvar , y = yvar, color = color)) +
stat_binmean(n = num_bins, geom = "line") +
stat_binmean(n = num_bins, geom = "point") +
labs(title = TITLE,
y = YTITLE,
x = "Date")
}
ggplot(as_centers[as_centers["year"] < 2015,], aes(x = year , y = all_star_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_others[as_others["year"] < 2015,], aes(x = year , y = all_star_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
binscatter(2, as_centers, as_centers$year, as_centers$all_star_yrs, "Centers", "Average years to make all star team", "years")
binscatter(2, as_others, as_others$year, as_others$all_star_yrs, "Others", "Average years to make all star team", "years")
good_centers <- aggregate(list(good_pts_yrs=players_centers$good_pts_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
good_others <- aggregate(list(good_pts_yrs=players_others$good_pts_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter(6, good_centers, good_centers$year, good_centers$good_pts_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(6,good_others, good_others$year, good_others$good_pts_yrs, "Others", "Average years to reach 90% max pts", "years")
# HSAC NBA Project
# Fall 2021
rm(list=ls()) # Removes all objects from the environment
cat('\014') # Clears the console
setwd("~/Desktop/NBA-Bigs") # Set working directory
if (!require(haven)) install.packages("haven"); library(haven)
if (!require(sandwich)) install.packages("sandwich"); library(sandwich)
if (!require(lmtest)) install.packages("lmtest"); library(lmtest)
if (!require(stargazer)) install.packages("stargazer"); library(stargazer)
if (!require(tidyverse)) install.packages("tidyverse"); library(tidyverse)
if (!require(lubridate)) install.packages("lubridate"); library(lubridate)
if (!require(statar)) install.packages("statar"); library(statar)
# Read in the data
players <- read.csv("scraping/players.csv")
salaries <- read.csv("scraping/salaries.csv")
player_data <- read.csv("scraping/player_data.csv")
# Add a column "normalized_salary" which represents each salary as a fraction of the salary cap
salaries$normalized_salary <- salaries$salary / salaries$salary_cap
# The following functions are used with "apply" to generate new columns
calculate_career_length <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
if (nrow(sal) == 0) {
return(NA)
}
return(max(sal$season) - min(sal$season))
}
calculate_max_salary_yrs <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
if (nrow(sal) == 0) {
return(NA)
}
max_sal <- max(sal$normalized_salary)
max_sal_year <- min(sal$season[sal$normalized_salary == max_sal])
first_year <- min(sal$season)
return(max_sal_year - first_year)
}
calculate_max_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
max_pts <- max(dat$pts_per_g)
max_ptrs_year <- min(dat$season[dat$pts_per_g == max_pts])
first_year <- min(dat$season)
return(max_ptrs_year - first_year)
}
calculate_good_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
good_pts <- max(dat$pts_per_g) * 0.9
good_ptrs_year <- min(dat$season[dat$pts_per_g >= good_pts])
first_year <- min(dat$season)
return(good_ptrs_year - first_year)
}
is_active_player <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
return(nrow(sal[sal$season == 2020,]))
}
calculate_all_star_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
if (nrow(dat[dat$all_star == 1,]) == 0) {
return(NA)
}
all_star_yr = min(dat$season[dat$all_star == 1])
first_yr = min(dat$season)
return(all_star_yr - first_yr)
}
## Add a column "career" that calculates number of years in career
players$career <- apply(players, 1, FUN = calculate_career_length)
## Add a column "max_sal_yrs" that calculates number of years between first contract and year with highest contract in career
players$max_sal_yrs <- apply(players, 1, FUN = calculate_max_salary_yrs)
## Add column "max_pts_yrs" that represents the number of years between first year and first year with highest ppg
players$max_pts_yrs <- apply(players, 1, FUN = calculate_max_pts_yrs)
## Add column "good_pts_yrs" that represents the number of years between first year and first year with ppg equal to at least 90% of their best ppg year
players$good_pts_yrs <- apply(players, 1, FUN = calculate_good_pts_yrs)
## Add column "is_active" that is 1 if player is currently active and 0 otherwise
players$is_active <- apply(players, 1, FUN = is_active_player)
## Add column "all_star_yrs" that is the number of years it took a player to make their first all star team
players$all_star_yrs <- apply(players, 1, FUN = calculate_all_star_yrs)
players <- players[players$is_active == 0 && players$career >= 5,]
# Aggregate average years to make all star team by draft year
players_centers = players[grepl("Center", players$position),]
players_others = players[!grepl("Center", players$position),]
as_centers <- aggregate(list(all_star_yrs=players_centers$all_star_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
as_others <- aggregate(list(all_star_yrs=players_others$all_star_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter<-function(num_bins, data, xvar, yvar, color, TITLE, YTITLE){
ggplot(data, aes(x = xvar , y = yvar, color = color)) +
stat_binmean(n = num_bins, geom = "line") +
stat_binmean(n = num_bins, geom = "point") +
labs(title = TITLE,
y = YTITLE,
x = "Date")
}
ggplot(as_centers[as_centers["year"] < 2015,], aes(x = year , y = all_star_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_others[as_others["year"] < 2015,], aes(x = year , y = all_star_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
binscatter(2, as_centers, as_centers$year, as_centers$all_star_yrs, "Centers", "Average years to make all star team", "years")
binscatter(2, as_others, as_others$year, as_others$all_star_yrs, "Others", "Average years to make all star team", "years")
good_centers <- aggregate(list(good_pts_yrs=players_centers$good_pts_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
good_others <- aggregate(list(good_pts_yrs=players_others$good_pts_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter(6, good_centers, good_centers$year, good_centers$good_pts_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(6,good_others, good_others$year, good_others$good_pts_yrs, "Others", "Average years to reach 90% max pts", "years")
# HSAC NBA Project
# Fall 2021
rm(list=ls()) # Removes all objects from the environment
cat('\014') # Clears the console
setwd("~/Desktop/NBA-Bigs") # Set working directory
if (!require(haven)) install.packages("haven"); library(haven)
if (!require(sandwich)) install.packages("sandwich"); library(sandwich)
if (!require(lmtest)) install.packages("lmtest"); library(lmtest)
if (!require(stargazer)) install.packages("stargazer"); library(stargazer)
if (!require(tidyverse)) install.packages("tidyverse"); library(tidyverse)
if (!require(lubridate)) install.packages("lubridate"); library(lubridate)
if (!require(statar)) install.packages("statar"); library(statar)
# Read in the data
players <- read.csv("scraping/players.csv")
salaries <- read.csv("scraping/salaries.csv")
player_data <- read.csv("scraping/player_data.csv")
# Add a column "normalized_salary" which represents each salary as a fraction of the salary cap
salaries$normalized_salary <- salaries$salary / salaries$salary_cap
# The following functions are used with "apply" to generate new columns
calculate_career_length <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
if (nrow(sal) == 0) {
return(NA)
}
return(max(sal$season) - min(sal$season))
}
calculate_max_salary_yrs <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
if (nrow(sal) == 0) {
return(NA)
}
max_sal <- max(sal$normalized_salary)
max_sal_year <- min(sal$season[sal$normalized_salary == max_sal])
first_year <- min(sal$season)
return(max_sal_year - first_year)
}
calculate_max_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
max_pts <- max(dat$pts_per_g)
max_ptrs_year <- min(dat$season[dat$pts_per_g == max_pts])
first_year <- min(dat$season)
return(max_ptrs_year - first_year)
}
calculate_good_pts_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
good_pts <- max(dat$pts_per_g) * 0.9
good_ptrs_year <- min(dat$season[dat$pts_per_g >= good_pts])
first_year <- min(dat$season)
return(good_ptrs_year - first_year)
}
is_active_player <- function(x) {
sal <- salaries[salaries$link == x[["link"]],]
return(nrow(sal[sal$season == 2020,]))
}
calculate_all_star_yrs <- function(x) {
dat <- player_data[player_data$link == x[["link"]],]
if (nrow(dat) == 0) {
return(NA)
}
if (nrow(dat[dat$all_star == 1,]) == 0) {
return(NA)
}
all_star_yr = min(dat$season[dat$all_star == 1])
first_yr = min(dat$season)
return(all_star_yr - first_yr)
}
## Add a column "career" that calculates number of years in career
players$career <- apply(players, 1, FUN = calculate_career_length)
## Add a column "max_sal_yrs" that calculates number of years between first contract and year with highest contract in career
players$max_sal_yrs <- apply(players, 1, FUN = calculate_max_salary_yrs)
## Add column "max_pts_yrs" that represents the number of years between first year and first year with highest ppg
players$max_pts_yrs <- apply(players, 1, FUN = calculate_max_pts_yrs)
## Add column "good_pts_yrs" that represents the number of years between first year and first year with ppg equal to at least 90% of their best ppg year
players$good_pts_yrs <- apply(players, 1, FUN = calculate_good_pts_yrs)
## Add column "is_active" that is 1 if player is currently active and 0 otherwise
players$is_active <- apply(players, 1, FUN = is_active_player)
## Add column "all_star_yrs" that is the number of years it took a player to make their first all star team
players$all_star_yrs <- apply(players, 1, FUN = calculate_all_star_yrs)
players <- players[players$is_active == 0 && players$career >= 5,]
# Aggregate average years to make all star team by draft year
players_centers = players[grepl("Center", players$position),]
players_others = players[!grepl("Center", players$position),]
as_centers <- aggregate(list(all_star_yrs=players_centers$all_star_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
as_others <- aggregate(list(all_star_yrs=players_others$all_star_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter<-function(num_bins, data, xvar, yvar, color, TITLE, YTITLE){
ggplot(data, aes(x = xvar , y = yvar, color = color)) +
stat_binmean(n = num_bins, geom = "line") +
stat_binmean(n = num_bins, geom = "point") +
labs(title = TITLE,
y = YTITLE,
x = "Date")
}
ggplot(as_centers[as_centers["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_others[as_others["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
binscatter(2, as_centers, as_centers$year, as_centers$all_star_yrs, "Centers", "Average years to make all star team", "years")
binscatter(2, as_others, as_others$year, as_others$all_star_yrs, "Others", "Average years to make all star team", "years")
good_centers <- aggregate(list(good_pts_yrs=players_centers$good_pts_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
good_others <- aggregate(list(good_pts_yrs=players_others$good_pts_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter(6, good_centers, good_centers$year, good_centers$good_pts_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(6,good_others, good_others$year, good_others$good_pts_yrs, "Others", "Average years to reach 90% max pts", "years")
binscatter(3, as_centers, as_centers$year, as_centers$all_star_yrs, "Centers", "Average years to make all star team", "years")
binscatter(3, as_others, as_others$year, as_others$all_star_yrs, "Others", "Average years to make all star team", "years")
binscatter(5, as_centers, as_centers$year, as_centers$all_star_yrs, "Centers", "Average years to make all star team", "years")
binscatter(5, as_others, as_others$year, as_others$all_star_yrs, "Others", "Average years to make all star team", "years")
ggplot(as_centers[as_centers["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_others[as_others["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_centers[good_centers["year"] < 2014,], aes(x = year , y = good_pts_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_others[good_others["year"] < 2014,], aes(x = year , y = good_pts_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_centers[good_centers["year"] < 2011,], aes(x = year , y = good_pts_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_others[good_others["year"] < 2011,], aes(x = year , y = good_pts_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_centers, aes(x = year , y = good_pts_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_others, aes(x = year , y = good_pts_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
players <- players[players$is_active == 0 && players$career >= 5,]
# Aggregate average years to make all star team by draft year
players_centers = players[grepl("Center", players$position),]
players_others = players[!grepl("Center", players$position),]
as_centers <- aggregate(list(all_star_yrs=players_centers$all_star_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
as_others <- aggregate(list(all_star_yrs=players_others$all_star_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
View(players)
players <- players[players$is_active == 0 && players$career >= 5,]
View(players)
View(players)
players <- players[players$is_active == 0,]
players <- players[players$career >= 5,]
View(players)
# Aggregate average years to make all star team by draft year
players_centers = players[grepl("Center", players$position),]
players_others = players[!grepl("Center", players$position),]
as_centers <- aggregate(list(all_star_yrs=players_centers$all_star_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
as_others <- aggregate(list(all_star_yrs=players_others$all_star_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter<-function(num_bins, data, xvar, yvar, color, TITLE, YTITLE){
ggplot(data, aes(x = xvar , y = yvar, color = color)) +
stat_binmean(n = num_bins, geom = "line") +
stat_binmean(n = num_bins, geom = "point") +
labs(title = TITLE,
y = YTITLE,
x = "Date")
}
ggplot(as_centers[as_centers["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_others[as_others["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_centers, aes(x = year , y = good_pts_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_others, aes(x = year , y = good_pts_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
binscatter(5, as_centers, as_centers$year, as_centers$all_star_yrs, "Centers", "Average years to make all star team", "years")
binscatter(5, as_others, as_others$year, as_others$all_star_yrs, "Others", "Average years to make all star team", "years")
good_centers <- aggregate(list(good_pts_yrs=players_centers$good_pts_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
good_others <- aggregate(list(good_pts_yrs=players_others$good_pts_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter(6, good_centers, good_centers$year, good_centers$good_pts_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(6,good_others, good_others$year, good_others$good_pts_yrs, "Others", "Average years to reach 90% max pts", "years")
ggplot(good_centers, aes(x = year , y = good_pts_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(good_others, aes(x = year , y = good_pts_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_centers[as_centers["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(as_others[as_others["year"] < 2014,], aes(x = year , y = all_star_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
sal_centers <- aggregate(list(max_sal_yrs=players_centers$max_sal_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
sal_others <- aggregate(list(max_sal_yrs=players_others$max_sal_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter(6, sal_centers, sal_centers$year, sal_centers$max_sal_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(6,sal_others, sal_others$year, sal_others$max_sal_yrs, "Others", "Average years to reach 90% max pts", "years")
ggplot(sal_centers, aes(x = year , y = max_sal_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(sal_others, aes(x = year , y = max_sal_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
binscatter(3, sal_centers, sal_centers$year, sal_centers$max_sal_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(3,sal_others, sal_others$year, sal_others$max_sal_yrs, "Others", "Average years to reach 90% max pts", "years")
sal_centers <- aggregate(list(max_sal_yrs=players_centers$max_sal_yrs), list(year=players_centers$year), FUN=mean, na.rm = TRUE)
sal_others <- aggregate(list(max_sal_yrs=players_others$max_sal_yrs), list(year=players_others$year), FUN=mean, na.rm = TRUE)
binscatter(6, sal_centers, sal_centers$year, sal_centers$max_sal_yrs, "Centers", "Average years to reach 90% max pts", "years")
binscatter(6,sal_others, sal_others$year, sal_others$max_sal_yrs, "Others", "Average years to reach 90% max pts", "years")
ggplot(sal_centers, aes(x = year , y = max_sal_yrs, color = "Centers")) +
geom_point() +
geom_smooth(method=lm)
ggplot(sal_others, aes(x = year , y = max_sal_yrs, color = "Others")) +
geom_point() +
geom_smooth(method=lm)
